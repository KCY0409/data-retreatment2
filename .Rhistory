?regex
?regex
# 단순 매칭
# grep은 찾고자하는 문자열이 있는지 찾아주는 함수
# grep(찾고자하는 패턴, 대상벡터)
data <-c("apple", "banana", "banano")
grep("banana", data)
grepl("banana", data)
grep("banano", data)
grep("banana", data)
# 문자열의 시작
# 단순 매칭하는 상황에서 "안에 패턴을 작성할때 ^을 맨 앞에 같이 사용하면
# 그 뒤의 글자로 시작하는 데이터만 찾는다.
data <-c("apple", "banana", "banano", "a banana")
grep("banana", data)
grep("^banana", data)
# 문자열의 끝
# 단순 매칭하는 상황에서 "안에 패턴을 작성할 때 $을 맨 뒤에 같이
# 사용하면 그 앞의 글자로 끝나는 데이터만 찾는다.
data <-c("apple", "banana", "banano", "a banana", "a banana a")
grep("banana", data)
grep("banana$", data)
grep("^banana$", data)
# 사용해보기
# nycflights13 패키지의 airports 데이터에 이름이 New가 포함되는 데이터는 몇 개?
# nycflights13 패키지의 airports 데이터에 이름이 New로 시작되는 데이터는 몇 개?
if(!requireNamespace("nycflights13")) install.packages("nycflights13")
library("nycflights13")
head(airports)
count(grep("New",airports))
n(grep("New",airports))
library(dplyr)
n(grep("New",airports))
count(grep("New",airports))
grep("New",airports))
head(airports)
View(airports)
airportD <- c(airports$name, airports$tzone)
grep("New",airportD)
n(grep("New",airportD))
count(grep("New",airportD))
# nycflights13 패키지의 airports 데이터에 이름이 New로 시작되는 데이터는 몇 개?
grep("^New", airportD)
# 임의의 글자 한 개
# .은 정규표현식에서 무엇이든 한 개의 글자를 의미
x <- c("apple", "banana", "pear")
grep(".a.", x)
# 메타문자를 글자 그대로
# \를 메타문자 앞에 쓰면 글자 그대로로 인식합니다.
# 그런데 \또한 메타문자로서 동작하기 때문에 \\를 작성해줘야 함
x <- c("apple", "banana", "pear",".apple")
grep("\\.a.", x)
grep("\.a.", x)
grep("[02468]", x)
# 문자 클래스
# 문자클래스를 표현하는 []는 대괄호 안에 있는 글자 하나하나가 문자클래스로 가능한 경우
x <- c("123", "1357", "999990", "1133")
grep("[02468]", x)
# 문자 클래스 내에서는 ^가 지정한 글자들을 제외하고라는 뜻
x <- c("123", "1357","999990","0200","02468")
grep("[^02468]", x)
#사용해 보기
# nycflights13 패키지의 airports데이터에 이름이 숫자로 끝나는 데이터는 몇개인가?
grep("[[:digit:]]$",airports)
#사용해 보기
# nycflights13 패키지의 airports데이터에 이름이 숫자로 끝나는 데이터는 몇개인가?
grep("[[:digit:]]",airports)
#사용해 보기
# nycflights13 패키지의 airports데이터에 이름이 숫자로 끝나는 데이터는 몇개인가?
grep("[[:digit:]]",airports$faa)
#사용해 보기
# nycflights13 패키지의 airports데이터에 이름이 숫자로 끝나는 데이터는 몇개인가?
grep("[[:digit:]]$",airports$faa)
#사용해 보기
# nycflights13 패키지의 airports데이터에 이름이 숫자로 끝나는 데이터는 몇개인가?
grep("[[:digit:]]$",airports$faa, airports$name)
#사용해 보기
# nycflights13 패키지의 airports데이터에 이름이 숫자로 끝나는 데이터는 몇개인가?
grep("[[:digit:]]$",airports$faa)
grep("[[:digit:]]$",airports$name)
#사용해 보기
# nycflights13 패키지의 airports데이터에 이름이 숫자로 끝나는 데이터는 몇개인가?
airportD2 <- c(airports$faa,name)
#사용해 보기
# nycflights13 패키지의 airports데이터에 이름이 숫자로 끝나는 데이터는 몇개인가?
airportD2 <- c(airports$faa and name)
#사용해 보기
# nycflights13 패키지의 airports데이터에 이름이 숫자로 끝나는 데이터는 몇개인가?
airportD2 <- c(airports$faa : name)
#사용해 보기
# nycflights13 패키지의 airports데이터에 이름이 숫자로 끝나는 데이터는 몇개인가?
airportD2 <- c(airports)
grep("[[:digit:]]$",airportD2)
View(airportD2)
grep("[[:digit:]]$",airportD2$Value)
#사용해 보기
# nycflights13 패키지의 airports데이터에 이름이 숫자로 끝나는 데이터는 몇개인가?
airportD2 <- c(airports$faa, airports$name, airports$lat , airports$lon, airports$alt, airports$tz, airports$dst, airports$tzone)
View(airportD2)
grep("[[:digit:]]$",airportD2)
Vier(grep("[[:digit:]]$",airportD2))
VieW(grep("[[:digit:]]$",airportD2))
max.print(grep("[[:digit:]]$",airportD2))
997 + 4929
# 앞에 글자가 없거나 하나
# ?는 글자 뒤에 붙어서 그 글자가 한개 있거나 없는 경우 모두를 표현할 때 사용
x <- c("apple", "banana", "pear", "aple")
grep("app?", x)
# 앞의 글자가 하나 이상
# + 는 글자 뒤에 붙어서 그 글자가 한대 이상 연속하는 모두를 표현할 때 사용
x <- c("apple", "banana", "pear", "aple")
grep("p+", x)
grep("ap+", x)
# 앞의 긃자가 없거나 하나 이상
# *는 글자 뒤에 붙어서 그 글자가 없는 경우부터 여러 개 연속하는 모두를 표현할 때 사용
x <- c("apple", "banana", "aple", "abble", "appppppppppple")
grep("app*", x)
# 앞의 긃자가 없거나 하나 이상
# *는 글자 뒤에 붙어서 그 글자가 없는 경우부터 여러 개 연속하는 모두를 표현할 때 사용
x <- c("apple", "banana", "pear", "aple", "abble", "appppppppppple")
grep("app*", x)
# 정말 그렇게 동작할까?
x <- c("a","aa","aaa","aaaa","aaaaa")
grep("a{3}", x)
grep("^a{3}$", x)
grep("a{3,}", x)
grep("a{,3}", x)
grep("a{2,3}", x)
stri<-"<p> <em>안녕</em>하세요 </p><p>테스트입니다.</p>"
sub("<p>.*</p>","tar",stri)
sub("<p>.*?</p>","tar",stri)
sub("<p>.*?</em>","tar",stri)
sub("<p>.*?</p>","tar",stri)
# 그룹
# 정규표현식에서는 글자 하나하나를 하나의 개체로 인식
x <- c("abc","abcabc", "abcabcadc", "abcabcabc", "adcabcabcabc")
grep("(abc){3}", x)
# 그룹의 캡쳐 및 사용
# 그룹은 sub등 치환 기능을 사용할 때 더 빛을 발합니다.
# 찾는 패턴에서 그룹을 지어둔 내용은 순서대로 \\1,\\2의 방법으로 바꿀 패턴에서 사용 가능
x <- c("^ab", "ab", "abc", "ab 12")
gsub("(ab) 12", "\\1 34", x)
# 또는 의 사용
# |는 or 의 뜻으롷 사용하는 글자
# 우선 단순 매칭에서 사용하는 경우 / ()과 함께 사용 가능
x <- c("^ab", "ab", "ac", "abc", "abd", "abe", "ab 12")
grep("abc|abc", x)
grep("abc|abd", x)
grep("a(c|bd)", x)
# 우편번호
# 우리나라는 새로운 방식인 "12345"와 "123-456" 두 가지 방식 사용
^[0-9]{3}([0-9]{2}|-[0-9]{3})&
# 전화번호
^\\(?[0-9]{2,3}\\)?[-. ]?[0-9]{3,4}[-. ]?[0-9]{4}$
# 전화번호
# ^\\(?[0-9]{2,3}\\)?[-. ]?[0-9]{3,4}[-. ]?[0-9]{4}$
gsub("^\\(?([0-9]{2,3})\\)?[-. ]?([0-9]{3,4})[-. ]?([0-9]{4})$",
"(\\1) \\2-\\3",data)
# 전화번호
# ^\\(?[0-9]{2,3}\\)?[-. ]?[0-9]{3,4}[-. ]?[0-9]{4}$
gsub("^\\(?([0-9]{2,3})\\)?[-. ]?([0-9]{3,4})[-. ]?([0-9]{4})$",
"(\\1) \\2-\\3",data)
if(!require(tidyverse)) install.packages("tidyverse")
library(stringr)
# 글자의 길이
# nchar()와 같이 길이를 결과로 주는 함수를 제공
str_length(c("abc","한글","ㅎㄱㅏ"))
# 글자의 일부만 가져오기
# 위치를 기준으로 일부만 가져오는 기능을 제공
x <- c("abcdef", "ghifjk")
str_sub(x, 3, 3)
str_sub(x, 3, 4)
str_sub(x, -4, -2)
# 일부분 바꾸기
# 일반적인 data.frame의 subset동작처럼 일부분을 지정하고, 값을 선언함으로써 바꾸는 것이 동작
str_sub(x, 3, 3) <- "X"
x
